///
/// JFunc_void_std__optional_std__string_.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include <optional>
#include <string>

namespace margelo::nitro::nitrotexttospeech {

  using namespace facebook;

  /**
   * C++ representation of the callback Func_void_std__optional_std__string_.
   * This is a Kotlin `(word: String?) -> Unit`, backed by a `std::function<...>`.
   */
  struct JFunc_void_std__optional_std__string_ final: public jni::HybridClass<JFunc_void_std__optional_std__string_> {
  public:
    static jni::local_ref<JFunc_void_std__optional_std__string_::javaobject> fromCpp(const std::function<void(const std::optional<std::string>& /* word */)>& func) {
      return JFunc_void_std__optional_std__string_::newObjectCxxArgs(func);
    }

  public:
    void call(jni::alias_ref<jni::JString> word) {
      _func(word != nullptr ? std::make_optional(word->toStdString()) : std::nullopt);
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotexttospeech/Func_void_std__optional_std__string_;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JFunc_void_std__optional_std__string_::call)});
    }

  private:
    explicit JFunc_void_std__optional_std__string_(const std::function<void(const std::optional<std::string>& /* word */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(const std::optional<std::string>& /* word */)> _func;
  };

} // namespace margelo::nitro::nitrotexttospeech
